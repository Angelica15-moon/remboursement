{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\almiarinantena\\\\Documents\\\\remboursement\\\\frontend\\\\src\\\\Insertion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [excelData, setExcelData] = useState(null);\n  const handleExcelUpload = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n        const parsedData = XLSX.utils.sheet_to_json(worksheet);\n        console.log('Données Excel chargées:', parsedData);\n        setExcelData(parsedData);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  };\n  const handleImportExcel = () => {\n    if (excelData) {\n      const mappedData = excelData.map(row => ({\n        RefClient: row.RefClient,\n        RefCredit: row.RefCredit,\n        nom: row.nom,\n        MontantAbandonnee: row.MontantAbandonnee,\n        DatePassagePerte: row.DatePassagePerte,\n        CAResponsable: row.CAResponsable,\n        Agence: row.Agence,\n        Type: row.Type\n      }));\n      fetch('http://localhost:3002/import-excel', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(mappedData)\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n        // Affichez un message de confirmation ici si nécessaire\n      }).catch(error => {\n        console.error('Erreur lors de l\\'importation des données Excel sur le backend:', error);\n      });\n      setExcelData(null);\n    } else {\n      alert('Chargez d\\'abord un fichier Excel');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-3\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"Importer donn\\xE9es par fichier excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          id: \"fileImport\",\n          type: \"file\",\n          accept: \".xls,.xlsx\",\n          onChange: handleExcelUpload,\n          \"aria-describedby\": \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleImportExcel,\n        variant: \"success\",\n        children: \"Importer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0UFmZMzUys8nNxomEAeIxt+Lq2M=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","XLSX","Form","Card","Button","InputGroup","jsxDEV","_jsxDEV","App","_s","excelData","setExcelData","handleExcelUpload","e","file","target","files","reader","FileReader","onload","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","parsedData","utils","sheet_to_json","console","log","readAsArrayBuffer","handleImportExcel","mappedData","map","row","RefClient","RefCredit","nom","MontantAbandonnee","DatePassagePerte","CAResponsable","Agence","Type","fetch","method","headers","body","JSON","stringify","then","response","json","catch","error","alert","className","children","Header","fileName","_jsxFileName","lineNumber","columnNumber","Control","id","accept","onChange","onClick","variant","_c","$RefreshReg$"],"sources":["C:/Users/almiarinantena/Documents/remboursement/frontend/src/Insertion.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nexport default function App() {\r\n  const [excelData, setExcelData] = useState(null);\r\n\r\n  const handleExcelUpload = (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    if (file) {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e) => {\r\n        const data = new Uint8Array(e.target.result);\r\n        const workbook = XLSX.read(data, { type: 'array' });\r\n        const sheetName = workbook.SheetNames[0];\r\n\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const parsedData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n      \r\n\r\n        console.log('Données Excel chargées:', parsedData);\r\n        setExcelData(parsedData);\r\n      };\r\n\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  };\r\n\r\n  const handleImportExcel = () => {\r\n\r\n   \r\n    if (excelData) {\r\n\r\n  \r\n\r\n      const mappedData = excelData.map((row) => ({\r\n        RefClient: row.RefClient,\r\n        RefCredit: row.RefCredit,\r\n        nom: row.nom,\r\n        MontantAbandonnee: row.MontantAbandonnee,\r\n        DatePassagePerte: row.DatePassagePerte,\r\n        CAResponsable: row.CAResponsable,\r\n        Agence: row.Agence,\r\n        Type: row.Type,\r\n      }));\r\n\r\n      fetch('http://localhost:3002/import-excel', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(mappedData),\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          // Affichez un message de confirmation ici si nécessaire\r\n        })\r\n        .catch((error) => {\r\n          console.error('Erreur lors de l\\'importation des données Excel sur le backend:', error);\r\n        });\r\n\r\n      setExcelData(null);\r\n    } else {\r\n      alert('Chargez d\\'abord un fichier Excel');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='m-3'>\r\n      <Card>\r\n        <Card.Header>Importer données par fichier excel</Card.Header>\r\n        <InputGroup className=\"mb-3\">\r\n          <Form.Control id=\"fileImport\" type='file' accept=\".xls,.xlsx\" onChange={handleExcelUpload}  aria-describedby=\"file-input\" />\r\n        </InputGroup>\r\n        <Button onClick={handleImportExcel} variant=\"success\">Importer</Button>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}